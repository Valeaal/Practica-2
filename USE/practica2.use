model Practica2

-- Reloj para apartado C --

class Clock
  attributes
    NOW : Integer init = 0
    resolution: Integer init = 1 
  operations
    tick() 
      begin
        self.NOW:=self.NOW + self.resolution;
        for o in self.ao do 
            o.tick()
        end;
      end
    run (n:Integer)
      begin
        for i in Sequence{1..n} do
          self.tick()
        end 
      end
end

abstract class ActiveObject
  operations
    tick() begin end 
end

association Time between 
  Clock [1] 
  ActiveObject [*] role ao ordered
end

----------------------------

class Estacion
    attributes
    isEndOfTheLine : Boolean derive: 
        self.viaIda->iterate(viaIda ; suma : Integer = 0 | suma+1) + self.viaVuelta->iterate(viaVuelta ; suma : Integer = 0 | suma+1) = 2
        
end

class Tren < ActiveObject
    attributes
        direccion : Real init: 1   
        time : Integer init : 0
        espera : Integer init : 0
        isMoving : Boolean init: false
        isOutOfOrder : Boolean init: false
    operations   
        move()
        begin
            self.isMoving:=true;
        end
        
        stop()
        begin
            self.isMoving:=false;
        end

        checkViaEnLinea(v : Via):
        Boolean = v.segmentoTieneVia.lineaDelSegmento->exists(m|m=self.lineaDeTren) -- Para ahorrar codigo

        tick()
        begin
            if (self.isMoving) then
                self.irAEstacion();
            end;
            
            if (self.isMoving=false) then
                self.esperaEstacion();
            end;        
        end
        -- Operación para buscar la próxima vía a coger. Además los trenes deben tardar 2 min entre estación y estación
        irAEstacion()
        begin
            if not self.isOutOfOrder then
                declare viaAnterior : Via;
                viaAnterior := self.viaDelTren;
                self.time := self.time + self.clock.resolution;
                    
                if (self.time) = 180 then
                    self.time := 0;
                    if(self.viaDelTren <> null) then
                        delete (self,self.estacionDelTren) from trenEstacion;
                        insert (self,self.viaDelTren.estacionVuelta) into trenEstacion; --self,nextStation
                        delete (self,self.viaDelTren) from trenVia;
                    end;

                    if (self.estacionDelTren.isEndOfTheLine) then
                        self.direccion:=self.direccion*-1;
                        if(not self.estacionDelTren.viaIda->asSequence()->first().viaOcupada) then
                            insert (self,self.estacionDelTren.viaIda->asSequence()->first()) into trenVia; --no va a tener mas xq es fin de linea, pero USE lo coge como un Set de 1 elemento
                        end;
                    else
                        if (self.direccion=1) then                       
                            if(not self.estacionDelTren.viaIda->select(v|v<>viaAnterior and self.checkViaEnLinea(v))->asSequence()->last().viaOcupada) then
                                insert(self, self.estacionDelTren.viaIda->select(v|v<>viaAnterior and self.checkViaEnLinea(v))->asSequence()->last()) into trenVia;
                            end;
                        else
                            if (self.direccion=-1) then
                                if(not viaAnterior.estacionVuelta.viaIda->select(v|v<>viaAnterior.segmentoTieneVia.viaPerteneceASegmento->select(viaAux|
                                viaAux<>viaAnterior)->asSequence()->first() and self.checkViaEnLinea(v))->asSequence()->first().viaOcupada) then
                                    insert(self, viaAnterior.estacionVuelta.viaIda->select(v|v<>viaAnterior.segmentoTieneVia.viaPerteneceASegmento->select(viaAux|
                                    viaAux<>viaAnterior)->asSequence()->first() and self.checkViaEnLinea(v))->asSequence()->first()) into trenVia;
                                end;
                            end;
                        end;
                    end;
                end;
            end;
        end

        -- Los trenes deben esperar 1 min en las estaciones
        esperaEstacion()
        begin
            self.time:=self.time + self.clock.resolution;
            if self.time = 60 then
                self.move();
            end;
        end

        -- Operación para reparar el tren
        reparar()
        begin
            self.isOutOfOrder := false;
        end
        pre outOfOrder : self.isOutOfOrder

        -- Operación para averiar el tren
        averiar()
        begin
            self.isOutOfOrder := true;
        end
        pre notOutOfOrder: not self.isOutOfOrder

        statemachines
        psm TrenFuncionando
            states
                s : initial
                EstarEnEstacion
                CirculandoEnVia
                Stopped
            transitions
                s->EstarEnEstacion
                EstarEnEstacion->Stopped { [self.isOutOfOrder or self.viaDelTren.viaOcupada] stop()}
                Stopped->CirculandoEnVia { [not self.isOutOfOrder and self.isMoving and not self.viaDelTren.viaOcupada] move()}
                CirculandoEnVia->EstarEnEstacion { [not self.isOutOfOrder and not self.isMoving and self.viaDelTren.viaOcupada and self.estacionDelTren->size() = 0] stop()}
                EstarEnEstacion->EstarEnEstacion { [self.isOutOfOrder] stop()}
        end
        
        psm TrenAveriado
            states
                s : initial
                Averiado
                TrenFuncional
            transitions
                s->TrenFuncional
                TrenFuncional->Averiado { [not self.isOutOfOrder] averiar()}
                Averiado->Averiado { [self.isOutOfOrder] stop() }
                Averiado->TrenFuncional { [self.isOutOfOrder] reparar() }
        end
end

class Linea
end

class Via
    attributes
    viaOcupada : Boolean derive = self.trenEnVia->size()>0
end

class Segmento
end
-- 
association trenVia between
Tren[0..1] role trenEnVia
Via[0..1] role viaDelTren
end

association trenEstacion between
Tren[0..*] role trenEnEstacion
Estacion[0..1] role estacionDelTren
end

association trenLinea between
Tren[0..*] role trenDeLinea
Linea[0..1] role lineaDeTren
end

aggregation segmentoPerteneceALinea between
Linea[1..*] role lineaDelSegmento
Segmento[1..*] role segmentoDeLinea
end

composition viasDelSegmento between
Segmento[1] role segmentoTieneVia
Via[2] role viaPerteneceASegmento
end

association estacionViaIda between
Estacion[1] role estacionIda
Via[1..*] role viaIda
end

association estacionViaVuelta between
Estacion[1] role estacionVuelta
Via[1..*] role viaVuelta
end


--
constraints
-- Un segmento debe de estar compuesto por dos vias
context Segmento inv segmentoTieneDosVias:
    self.viaPerteneceASegmento->iterate(vias ; sum : Integer = 0 | sum+1) = 2

-- Numero de lineas mayor que cero
context Linea inv lineasMayorQueCero:
    Linea.allInstances()->size() > 0

-- Todas las lineas deben de tener al menos un segmento asociado
context Linea inv lineasTienenAlMenosUnSegmentoAsociado:
    Linea.allInstances().segmentoDeLinea <> null

-- Las estaciones tienen un numero par de vias
context Estacion inv estacionTieneNumeroParDeVias:
    (self.viaVuelta->iterate(vias ; sum : Integer = 0 | sum+1) + self.viaIda->iterate(vias ; sum : Integer = 0 | sum+1)).mod(2) = 0









