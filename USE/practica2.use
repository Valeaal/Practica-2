model Practica2

-- Reloj para apartado C --

class Clock --¡Está buggy, revisar!
  attributes
    NOW : Integer init = 0
    resolution: Integer init = 1 
  operations
    tick() 
      begin
        self.NOW:=self.NOW + self.resolution;
        for o in self.ao do 
            o.tick()
        end;
      end
    run (n:Integer)
      begin
        for i in Sequence{1..n} do
          self.tick()
        end 
      end
end

abstract class ActiveObject
  operations
    tick() begin end 
end

association Time between 
  Clock [1] 
  ActiveObject [*] role ao ordered
end

----------------------------

class Estacion
    attributes
    aforo : Integer
    isEndOfTheLine : Boolean derive: 
        self.viaIda->iterate(viaIda ; suma : Integer = 0 | suma+1) + self.viaVuelta->iterate(viaVuelta ; suma : Integer = 0 | suma+1) = 2
        
end

class Tren < ActiveObject
    attributes
        direccion : Real init: 1   
        --stopTime : Integer init: 0
        --movingTime : Integer init: 0
        time : Integer init : 0
        isMoving : Boolean init: false
        isOutOfOrder : Boolean init: false
    operations   
        move()
        begin
            self.isMoving:=true;
        end
        
        stop()
        begin
            self.isMoving:=false;
        end

        checkViaEnLinea(v : Via):
        Boolean = v.segmentoTieneVia.lineaDelSegmento->exists(m|m=self.lineaDeTren) -- Para ahorrar codigo

        tick()
        begin
        declare viaAnterior : Via;
        viaAnterior := self.viaDelTren;
            if (self.isMoving) then
                self.time := self.time + self.clock.resolution;
                -- Los trenes deben tardar 2 min entre estación y estación
                if (self.time) = 180 then
                    self.time := 0;
                    if (self.direccion=1) then
                        delete (self,self.estacionDelTren) from trenEstacion;
                        insert (self,self.viaDelTren.estacionVuelta) into trenEstacion; --self,nextStation
                        delete (self,self.viaDelTren) from trenVia;
                        if (self.estacionDelTren.isEndOfTheLine) then
                            self.direccion:=self.direccion*-1;
                            insert (self,self.estacionDelTren.viaIda->asSequence()->first()) into trenVia; --no va a tener mas xq es fin de linea, pero USE lo coge como un Set de 1 elemento
                        else
                            insert(self, self.estacionDelTren.viaIda->select(v|v<>viaAnterior and self.checkViaEnLinea(v))->asSequence()->last()) into trenVia;
                        end;
                    else
                        if (self.direccion=-1) then
                            delete (self,self.estacionDelTren) from trenEstacion;
                            insert (self,self.viaDelTren.estacionVuelta) into trenEstacion; --self,nextStation
                            delete (self,self.viaDelTren) from trenVia;
                            if (self.estacionDelTren.isEndOfTheLine) then
                                self.direccion:=self.direccion*-1;
                                insert (self,self.estacionDelTren.viaIda->asSequence()->first()) into trenVia; --no va a tener mas xq es fin de linea, pero USE lo coge como un Set de 1 elemento
                            else
                                insert(self, viaAnterior.estacionVuelta.viaIda->select(v|v<>viaAnterior.segmentoTieneVia.viaPerteneceASegmento->select(viaAux|
                                    viaAux<>viaAnterior)->asSequence()->first() and self.checkViaEnLinea(v))->asSequence()->first()) into trenVia;
                            end;
                        end;
                    end;
                end;
                if self.isOutOfOrder=true then
                        self.reparar();       
                end;
            end;
            -- Los trenes deben esperar 1 min en las estaciones
            if (self.isMoving=false) then
                self.time:=self.time + self.clock.resolution;
                if self.time = 60 then
                    self.move();
                end;
            end;        
        end

        -- Un tren tarda 1 hora en ser reparado
        reparar()
        begin
            self.time:=self.time + self.clock.resolution;
            if self.time = 3600 then
                self.isOutOfOrder := false;
                self.time := 0;
                self.move();
            end;
        end

        -- Operación para averiar el tren
        averiar()
        begin
            self.isOutOfOrder := true;
        end
end

class Linea
end

class Via
    attributes
    ocupado : Boolean derive: self.trenEnVia <> null
end

class Segmento
end
-- 
association trenVia between
Tren[0..1] role trenEnVia
Via[0..1] role viaDelTren
end

association trenEstacion between
Tren[0..*] role trenEnEstacion
Estacion[0..1] role estacionDelTren
end

association trenLinea between
Tren[0..*] role trenDeLinea
Linea[0..1] role lineaDeTren
end

aggregation segmentoPerteneceALinea between
Linea[1..*] role lineaDelSegmento
Segmento[1..*] role segmentoDeLinea
end

composition viasDelSegmento between
Segmento[1] role segmentoTieneVia
Via[2] role viaPerteneceASegmento
end

association estacionViaIda between
Estacion[1] role estacionIda
Via[1..*] role viaIda
end

association estacionViaVuelta between
Estacion[1] role estacionVuelta
Via[1..*] role viaVuelta
end


--
constraints
-- Un segmento debe de estar compuesto por dos vias
context Segmento inv segmentoTieneDosVias:
    self.viaPerteneceASegmento->iterate(vias ; sum : Integer = 0 | sum+1) = 2

-- Un tren no puede usar una via ocupada
--context Tren inv trenNoPuedeUsarUnaViaOcupada:
    --self.viaDelTren.ocupada -> no se como implementarlo, ya que si esto es false, al ocupar la via vacia el mismo tren hará que la invariante no rule

-- Numero de lineas mayor que cero
context Linea inv lineasMayorQueCero:
    Linea.allInstances()->size() > 0

-- Todas las lineas deben de tener al menos un segmento asociado
context Linea inv lineasTienenAlMenosUnSegmentoAsociado:
    Linea.allInstances().segmentoDeLinea <> null

-- Las estaciones tienen un numero par de vias
context Estacion inv estacionTieneNumeroParDeVias:
    (self.viaVuelta->iterate(vias ; sum : Integer = 0 | sum+1) + self.viaIda->iterate(vias ; sum : Integer = 0 | sum+1)).mod(2) = 0









