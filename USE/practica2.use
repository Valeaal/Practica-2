model Practica2

class Estacion
end

class Tren
end

class Linea
end

class Via
end

association sentidoIda between
    Tren[0..*] role trenIda
    Via[0..*] role viaIda 
end

association sentidoVuelta between
    Tren[0..*] role trenVuelta
    Via[0..*] role viaVuelta
end

association llegaAEstacion between
    Tren[0..*] role trenEstacion
    Estacion[0..*] role estacionTren
end

association trenPerteneceALinea between
    Tren[0..*] role trenDeLinea
    Linea[1] role circulaLinea
end

associationclass segmentoEstacion between
    Estacion [1] role estacionSalida
    Estacion[1] role estacionDestino
end

aggregation segmentoEstacionLinea between
    Linea[1..*] role lineaDelSegmento
    segmentoEstacion[0..*] role segmentoEstacion
end

composition segmentoTieneDosVias between
    segmentoEstacion[1] role segmento
    Via[2] role vias
end

constraints

-- En esta contraint comprobamos que la estacion de salida y la de destino no sean la misma

context segmentoEstacion inv DiferentesEstaciones:
    self.estacionSalida <> self.estacionDestino

-- Comprobaremos que haya como maximo un tren por via en cada sentido

context Via inv UnTrenPorVia:
    Via.allInstances()->forAll(vias | vias.trenIda->size() <= 1) and
    Via.allInstances()->forAll(vias | vias.trenVuelta->size() <= 1)

-- Numero de lineas mayor que cero

context Linea inv LineasMayorQueCero:
    Linea.allInstances()->size() > 0

-- Numero de segmentos mayor que cero para cada linea

context Linea inv SegmentosMayorQueCero:
    Linea.allInstances().segmentoEstacion->size() > 0

-- Numero de estaciones mayor que cero para cada linea






